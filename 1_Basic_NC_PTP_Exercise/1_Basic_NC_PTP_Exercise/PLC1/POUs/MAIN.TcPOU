<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{42e41504-19b0-4be3-aee2-d44241402398}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	{region 'State Machine Variables'}
	// State of the state machine
	nState 			: INT;
	// Control Variables
	bStart, bHalt 	: BOOL;
	{endregion}
	
	{region 'NC Variables'}
	// Axis Control Ref
	Axis			: ARRAY[1..3] OF Axis_Ref;
	// Axis Power Block
	mcPower 		: ARRAY[1..3] OF MC_Power;
	// Axis Move Absolute Block
	mcMoveAbs 		: MC_MoveAbsolute;
	// Absolute Position
	fPosition 		: LREAL := POSITION_A;
	// Gear-In Function Block
	mcGearIn 		: MC_GearIn;
	// External Setpoint Gen Enable
	mcExtSpEnable 	: MC_ExtSetPointGenEnable;
	// Gen Feed Direction
	nDirection		: DINT;
	{endregion}

	{region  'General System Variables'}
	// Loop Iterator
	I_itr			: INT;
	// Random Position
	Random			: DRAND;
	// Dwell Timer
	Dwell 			: TON;
	{endregion}
END_VAR
VAR CONSTANT
	{region  'Position Constants'}
	// Position A Setpoint
	POSITION_A 		: LREAL := -5000;
	// Position B Setpoint
	POSITION_B 		: LREAL := 5000;
	{endregion}
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Simple NC State Machine

CASE nState OF
	{region 'Start of State Machine'}
	0:	// Start the state machine
		IF bStart THEN
			bStart := FALSE;
			nState := nState + 10;
		END_IF
	{endregion}
	
	{region 'Axes Power Section'}
	10: // Power on the axis
		FOR I_itr := 1 TO 3 DO
			mcPower[I_itr](Axis := Axis[I_itr], Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE, Override := 100.0);
		END_FOR
		nState := nState + 10;
	
	20: // Check all axis are enabled
		FOR I_itr := 1 TO 3 DO
			// Check if motor is enabled
			IF NOT mcPower[I_itr].Status THEN
				// Return to power state, or reset state if you have one
				// At the end of this state we add 10, so to return to 10 we need to subtract 20
				nState := nState - 20;
				EXIT;
			END_IF
		END_FOR
		nState := nState + 10;
	{endregion}
		 
	{region 'Exercise 2 - GearIn Function'}	
	30: (*
		**	Exercise 2 - Gear-In Axis 2 to Axis 1
		*)
		(*
		mcGearIn(Master:= Axis[1], Slave:= Axis[2], Execute:= TRUE, RatioNumerator:= 0.5, RatioDenominator:= 1);
		IF mcGearIn.InGear THEN
			mcGearIn(Master:= Axis[1], Slave:= Axis[2], Execute:= FALSE, RatioNumerator:= 0.5, RatioDenominator:= 1);
			nState := nState + 10;
		END_IF
		*)
	{endregion}
	
	{region 'Exercise 3 - External Setpoint'}		 
	40: (*
		**	Exercise 3 - Enable External Setpoint Generator for Axis 3
		*)
		(*
		mcExtSpEnable(Axis:= Axis[3], Execute:= TRUE, Position:= 0, PositionType:= POSITIONTYPE_ABSOLUTE);
		IF mcExtSpEnable.Done THEN
			mcExtSpEnable(Axis:= Axis[3], Execute:= FALSE, Position:= 0, PositionType:= POSITIONTYPE_ABSOLUTE);
			nState := nState + 10;
		END_IF
		*)
	{endregion}	
		 
	{region 'Exercise 1 - Reversing Sequence'}		
	50: (*
		** Exercise 1 - Execute an absolute move on Axis 1 and wait here until done
		*)
			 
		(*
		// Execute move to Position A
		mcMoveAbs(Axis:= Axis[1], Execute:= TRUE, Position:= fPosition, Velocity := 1000, Acceleration := 2000, Deceleration := 2000, Jerk := 5000);
		// Check if move is complete
		IF mcMoveAbs.Done THEN
			mcMoveAbs(Axis:= Axis[1], Execute:= FALSE);
			nState := nState + 10;
		END_IF
		*)
	60: (*
		** Exercise 1 - Call a dwell timer, wait here until time is elapsed
		*)
			 
		(*
		Dwell(IN:= TRUE, PT:= T#1S);
		IF Dwell.Q THEN
			Dwell(IN:= FALSE, PT:= T#1S);
			nState := nState + 10;
		END_IF
		*)
		
	70: (*
		** Exercise 1 - Check what position was last issued, and command a new one
		*)
		// Swap the position
		//IF fPosition = POSITION_A THEN
		//	fPosition := POSITION_B;
		//ELSE
		//	fPosition := POSITION_A;
		//END_IF
			 
		(*		  
		Random(Seed:= 1, Num=> fPosition);
		IF Axis[1].NcToPlc.ActPos > 0 THEN
			fPosition := fPosition * -5000.0;
		ELSE
			fPosition := fPosition * 5000.0;
		END_IF	
		nState := nState + 10;
		*)
	{endregion}
		
	{region 'End of State Machine'}
	80:
		// Check if continuous loop, or return to 0
		IF bHalt THEN
			bHalt := TRUE;
			nState := 0;
		ELSE
			nState := nState - 30;
		END_IF
	{endregion}		
END_CASE
{region 'Exercise 3 - External Setpoint'}	
(* 
** Exercise 3 - External Setpoint Generator Feed 
*)

(*
// Read the status of Axis 1
Axis[1].ReadStatus();

// Read the direction of Axis 1 and map it to Axis 3
IF Axis[1].Status.PositiveDirection THEN
	nDirection := 1;
ELSIF Axis[1].Status.NegativeDirection THEN
	nDirection := -1;
ELSE
	nDirection := 0;
END_IF

// Call the Setpoint Feed
MC_ExtSetPointGenFeed(Position:= Axis[1].NcToPlc.ActPos, Velocity:= Axis[1].NcToPlc.ActVelo, Acceleration:= Axis[1].NcToPlc.ActAcc, Direction:= nDirection, Axis:= Axis[3]);
{endregion}
*)]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="6" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="3" />
      <LineId Id="53" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="278" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="166" Count="1" />
      <LineId Id="169" Count="1" />
      <LineId Id="339" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="340" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="172" Count="2" />
      <LineId Id="341" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="342" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="284" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="346" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="142" Count="3" />
      <LineId Id="88" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="204" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="345" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="206" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="201" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="146" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="347" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="161" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="113" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="251" Count="1" />
      <LineId Id="250" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="294" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>