<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{42e41504-19b0-4be3-aee2-d44241402398}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR	
	{region 'NC Variables'}
	// Status Array of MCS Position
	MCS_Positions : ARRAY[1..MAX_MCS_AXES] OF LREAL;	
	// Axis Control Ref for ACS
	ACS_Axis		: ARRAY[1..MAX_ACS_AXES] OF Axis_Ref;
	// Axis Control Ref for MCS
	MCS_Axis		: ARRAY[1..MAX_MCS_AXES] OF Axis_Ref;
	// ACS Axis Power Block
	mcACS_Power 	: ARRAY[1..MAX_ACS_AXES] OF MC_Power;
	// MCS Axis Power Block
	mcMCS_Power 	: ARRAY[1..MAX_MCS_AXES] OF MC_Power;
	// Axis Set Position Block
	mcSetPosition 	: ARRAY[1..MAX_ACS_AXES] OF MC_SetPosition;
	{endregion}
		 
	{region  'Kinematics Variables'}
	// Kinematic Model Reference
	{attribute 'TcInitSymbol'}
	oidTrafo			: OTCID;
	// Struct In from Kin Channel
	in_stKinToPlc      AT %I*     : NCTOPLC_NCICHANNEL_REF;
	// Struct Out to Kin Channel
	out_stPlcToKin     AT %Q*     : PLCTONC_NCICHANNEL_REF;	 
	// Axes Configuration Structure
	stAxesConfig		: ST_KinAxes;
	// Kinematics Configuration Group			  
	fbConfigKinGroup	: FB_KinConfigGroup;
	// Reset the Kin Group
	fbResetKinGroup   : FB_KinResetGroup;
	// Calculating the Trafo
	fbKinCalcTrafo		: FB_KinCalcTrafo;
	// Struct of position into the calculation
    stAxesPosIn			: ARRAY[1..8] OF LREAL;
	// Struct of positions out
    stAxesPosOut		: ARRAY[1..8] OF LREAL;			  
	// Scara Meta Info 
	uScaraMetaInfoIn	: U_KinMetaInfo;
	// Scara Meta Info
    uScaraMetaInfoOut	: U_KinMetaInfo;
  	// Unlock Trafo
	fbUnlockTrafoParam	: FB_KinUnlockTrafoParam;
	// Lock Trafo
	fbLockTrafoParam	: FB_KinLockTrafoParam;
	// ADS Write Block
    fbADSWRITE			: ADSWRITE;	
	// Parameter ID to Change (*Inner Arm Length*)
	pidTrafo			: UDINT := 16#05010020; 
	// Value to write to the parameter
	fParamValue			: LREAL := 400.0;			  
	{endregion}

	{region  'General System Variables'}
	// Loop Iterator
	I_itr			: INT;
	{endregion}
		 
	{region 'State Machine Variables'}
	// State of the state machine
	nState 			: INT;
	// Control Variables
	bStart, bHalt 	: BOOL;
	// Control the steps
	bStep1, bFixStep, bStep2, bStep3, bStep4, bStep5, bStep6 : BOOL;
	{endregion}
END_VAR
VAR CONSTANT
	{region  'Axes Constants'}
	// ACS Axes Count
	MAX_ACS_AXES 		: INT := 4;
	// MCS Axes Count
	MAX_MCS_AXES 		: INT := 4;
	// Joint Positions
	AXES_JOINT_POSE	: ARRAY[1..MAX_ACS_AXES] OF LREAL := [0.0, 90.0, 0.0, 0.0];
	{endregion}
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Simple NC State Machine

CASE nState OF
	{region 'Start of State Machine'}
	0:	// Start the state machine
		IF bStart THEN
			bStart := FALSE;
			nState := nState + 10;
		END_IF
	{endregion}
	
	{region 'ACS Power Section'}
	10: // Power on the axis
		FOR I_itr := 1 TO MAX_ACS_AXES DO
			mcACS_Power[I_itr](Axis := ACS_Axis[I_itr], Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE, Override := 100.0);
		END_FOR
		nState := nState + 10;
	
	20: // Check all axis are enabled
		FOR I_itr := 1 TO MAX_ACS_AXES DO
			// Check if motor is enabled
			IF NOT mcACS_Power[I_itr].Status THEN
				// Return to power state, or reset state if you have one
				// At the end of this state we add 10, so to return to 10 we need to subtract 20
				nState := nState - 20;
				EXIT;
			END_IF
		END_FOR
		nState := nState + 10;
	{endregion}
		 
	{region 'MCS Power Section'}
	30: // Power on the axis
		FOR I_itr := 1 TO MAX_MCS_AXES DO
			mcMCS_Power[I_itr](Axis := MCS_Axis[I_itr], Enable := TRUE, Enable_Positive := TRUE, Enable_Negative := TRUE, Override := 100.0);
		END_FOR
		nState := nState + 10;
	
	40: // Check all axis are enabled
		FOR I_itr := 1 TO MAX_MCS_AXES DO
			// Check if motor is enabled
			IF NOT mcMCS_Power[I_itr].Status THEN
				// Return to power state, or reset state if you have one
				// At the end of this state we add 10, so to return to 10 we need to subtract 20
				nState := nState - 20;
				EXIT;
			END_IF
		END_FOR
		nState := nState + 10;
	{endregion}

	{region 'Starting point for steps'}
	50: // Wait State
		IF bStep1 THEN
			bStep1 := FALSE;
			nState := nState + 10;
		END_IF
	{endregion}
	  
	{region 'Step 1 - Assemble the Axes List Struct'}
	60: (*
		**	Step 1 - Assemble the Axes List Struct
		*)
		(*******************************************)
		// Assign the ACS Axes
		FOR I_itr := 1 TO MAX_ACS_AXES DO
			stAxesConfig.nAxisIdsAcs[I_itr] := ACS_Axis[I_itr].NcToPlc.AxisId;
	 	END_FOR
		// Assign the MCS Axes
		FOR I_itr := 1 TO MAX_MCS_AXES DO
			stAxesConfig.nAxisIdsMcs[I_itr] := MCS_Axis[I_itr].NcToPlc.AxisId;
	 	END_FOR
		(*******************************************)
		IF bFixStep	THEN
			nState := nState + 10; 		 
		END_IF	
	{endregion}
		 
	{region 'Step 2 - Fixing Issues}
	70:	// Step 2 might have an issue, here is where you'll fix it
		(**********************************************************)
		FOR I_itr := 1 TO MAX_ACS_AXES DO
			mcSetPosition[I_itr](Axis := ACS_Axis[I_itr], Execute := TRUE, Position := AXES_JOINT_POSE[I_itr]);		 
	 	END_FOR
		(**********************************************************)	 
		nState := nState + 10; 
			 
	80: // Check if the command is complete
		(**********************************************************)
		FOR I_itr := 1 TO MAX_ACS_AXES DO
			mcSetPosition[I_itr](Axis := ACS_Axis[I_itr], Execute := FALSE, Position := AXES_JOINT_POSE[I_itr]);		 
	 	END_FOR
		(**********************************************************)	 
		IF bStep2 THEN
			bStep2 := FALSE;
			nState := nState + 10;
		END_IF		 
	{endregion}
		 
	{region 'Step 2 - Configure Kinematic Group'}		 
	90: (*
		**	Step 2 - Configure Kinematic Group
		*)
		(*******************************************)
		fbConfigKinGroup(bExecute := TRUE, bCartesianMode := TRUE, stAxesList := stAxesConfig, stKinRefIn := in_stKinToPlc); 
		// If you get an error, think about why it doesnt work
		IF fbConfigKinGroup.bDone THEN
			nState := nState + 10;	 
		END_IF
		(*******************************************)					   
	{endregion}	
		 		  	 
	{region 'Step 3 - Move the configuration'}
	100: (*
		** Step 3 - Move the configuration
		*)
		(*******************************************	 
		*******************************************)					   
		IF bStep5 THEN
			bStep5 := FALSE;
			nState := nState + 10;
		END_IF
	{endregion}
		
	{region 'Step 5 - Break the Kinematic Group'}	
	110: (*
		** Step 5 - Break the Kinematic Group
		** NOTE : Step 4 is at the bottom of POU
		*)
		(*******************************************)
		fbResetKinGroup(
			bExecute := TRUE, 
			nItpChannelId := in_stKinToPlc.ChnId, 
			stKinRefIn := in_stKinToPlc, 
			stAxesList := stAxesConfig);
				 
		IF fbResetKinGroup.bDone THEN
			fbResetKinGroup(bExecute := FALSE, nItpChannelId := in_stKinToPlc.ChnId, stKinRefIn := in_stKinToPlc, stAxesList := stAxesConfig);	 
			nState := nState + 10;	 
		END_IF		 
		(*******************************************)					   
	{endregion}
		 
	{region 'Wait state before Step 6'}
	120: // Wait state before step 6
		IF bStep6 THEN
			bStep6 := FALSE;
			nState := nState + 10;
		END_IF
	{endregion}
	
	{region 'Step 6 - Unlock Trafo and Modify Params'}
	130: (*
		** Step 6 - Unlock Trafo and Modify Params
		*)
		(*******************************************)
		fbUnlockTrafoParam(bExecute := TRUE, oidTrafo := oidTrafo);
		IF fbUnlockTrafoParam.bDone THEN
			fbUnlockTrafoParam(bExecute := FALSE, oidTrafo := oidTrafo);
			nState := nState + 10;	 
		END_IF
			 
	140: // Write the value with ADS
		fbADSWRITE(	NETID:='' ,
					PORT:= AMSPORT_R0_NCSAF,
					IDXGRP:=oidTrafo ,
					IDXOFFS:= pidTrafo,
					LEN:=SIZEOF(fParamValue) ,
					SRCADDR:= ADR(fParamValue),
					WRITE:=TRUE);	

		IF NOT fbADSWRITE.BUSY THEN
			fbADSWRITE(WRITE:=FALSE);
			nState := nState + 10;	 
		END_IF	  
		
	150: // Lock Trafo back up
		fbLockTrafoParam(bExecute := TRUE, oidTrafo := oidTrafo);					   
		IF fbLockTrafoParam.bDone THEN
			fbLockTrafoParam(bExecute := FALSE, oidTrafo := oidTrafo);
			nState := nState + 10;
		END_IF
		(*******************************************)		 
	{endregion}
		
	{region 'End of State Machine'}
	160: // Check if continuous loop, or return to 0
		IF bStep1 THEN
			bStep1 := FALSE;
			nState := 60;
		END_IF
	{endregion}		
END_CASE

{region 'Step 4 - Calculate the Transformation'}	
(* 
** Step 4 - Calculate the Transformation
*)
IF bStep4 THEN
(***********************************************)
	// Toggle eveything false		 
	fbKinCalcTrafo(
		bExecute := FALSE,	
		bForward := FALSE, 
		stAxesPosIn := stAxesPosIn, 
		stAxesPosOut := stAxesPosOut, 
		uMetaInfoIn:= uScaraMetaInfoIn, 
		uMetaInfoOut:= uScaraMetaInfoOut);
		 
	// Check if Kinematics is running, if not then calculate the MCS
	IF F_KinGetChnOperationState(stKinRefIn := in_stKinToPlc) = E_KinStatus.KinStatus_Ready THEN
		FOR I_itr := 1 TO MAX_MCS_AXES DO
			MCS_Positions[I_itr] := MCS_Axis[I_itr].NcToPlc.ActPos;
		END_FOR		 
	ELSE
		// Copy the ACS positions for calculation
		FOR I_itr := 1 TO MAX_MCS_AXES DO
			stAxesPosIn[I_itr] := ACS_Axis[I_itr].NcToPlc.ActPos;
		END_FOR		 
		// Tell the calculation that the SCARA is a Right Arm		  
		uScaraMetaInfoIn.eScara := E_KinMetaInfoScara.scaraRightArm;
		
		// Compute the kinematics
		fbKinCalcTrafo(
			bExecute := TRUE, 
			bForward := TRUE, 
			oidTrafo := oidTrafo, 
			stAxesPosIn := stAxesPosIn, 
			stAxesPosOut := stAxesPosOut, 
			uMetaInfoIn:= uScaraMetaInfoIn, 
			uMetaInfoOut:= uScaraMetaInfoOut); 	
				 
		// Copy the computed values into the MCS_Position array
		FOR I_itr := 1 TO MAX_MCS_AXES DO
			MCS_Positions[I_itr] := stAxesPosOut[I_itr];
		END_FOR	
			  
	END_IF
(***********************************************)
END_IF
{endregion}
	 ]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="988" Count="2" />
      <LineId Id="1400" Count="1" />
      <LineId Id="993" Count="6" />
      <LineId Id="1399" Count="0" />
      <LineId Id="1001" Count="38" />
      <LineId Id="1398" Count="0" />
      <LineId Id="1041" Count="6" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1049" Count="11" />
      <LineId Id="1212" Count="0" />
      <LineId Id="1214" Count="1" />
      <LineId Id="1062" Count="2" />
      <LineId Id="1396" Count="0" />
      <LineId Id="1066" Count="19" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1087" Count="10" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1395" Count="0" />
      <LineId Id="1108" Count="2" />
      <LineId Id="1114" Count="12" />
      <LineId Id="1229" Count="4" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1237" Count="0" />
      <LineId Id="1242" Count="0" />
      <LineId Id="1238" Count="1" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1251" Count="0" />
      <LineId Id="1250" Count="0" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1253" Count="2" />
      <LineId Id="1248" Count="0" />
      <LineId Id="1136" Count="0" />
      <LineId Id="1252" Count="0" />
      <LineId Id="1137" Count="0" />
      <LineId Id="1394" Count="0" />
      <LineId Id="1139" Count="2" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1277" Count="0" />
      <LineId Id="1275" Count="1" />
      <LineId Id="1278" Count="1" />
      <LineId Id="1282" Count="0" />
      <LineId Id="1284" Count="5" />
      <LineId Id="1295" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1305" Count="1" />
      <LineId Id="1296" Count="0" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1307" Count="0" />
      <LineId Id="1313" Count="0" />
      <LineId Id="1146" Count="3" />
      <LineId Id="1308" Count="0" />
      <LineId Id="1150" Count="3" />
      <LineId Id="1155" Count="2" />
      <LineId Id="1160" Count="31" />
      <LineId Id="1211" Count="0" />
      <LineId Id="1192" Count="17" />
      <LineId Id="1402" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>