///////////////////////////////////////////////////////////////////////////////
// MyFirstTrafo.cpp
#include "TcPch.h"
#pragma hdrstop

#include "MyFirstTrafo.h"
#include "MyFirstTrafoVersion.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CMyFirstTrafo
BEGIN_INTERFACE_MAP(CMyFirstTrafo)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcNcTrafo, ITcNcTrafo)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_IPERSIST_LIB(CMyFirstTrafo, VID_MyFirstTrafo, CID_MyFirstTrafoCMyFirstTrafo)
IMPLEMENT_ITCOMOBJECT(CMyFirstTrafo)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CMyFirstTrafo)
IMPLEMENT_ITCADI(CMyFirstTrafo)
IMPLEMENT_ITCWATCHSOURCE(CMyFirstTrafo)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CMyFirstTrafo 
BEGIN_SETOBJPARA_MAP(CMyFirstTrafo)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_MyFirstTrafoZHeight, m_ZHeight)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CMyFirstTrafo 
BEGIN_GETOBJPARA_MAP(CMyFirstTrafo)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_MyFirstTrafoZHeight, m_ZHeight)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CMyFirstTrafo
BEGIN_OBJPARAWATCH_MAP(CMyFirstTrafo)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CMyFirstTrafo
BEGIN_OBJDATAAREA_MAP(CMyFirstTrafo)
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
CMyFirstTrafo::CMyFirstTrafo()
{
///<AutoGeneratedContent id="MemberInitialization">
	m_ZHeight = 0;
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
CMyFirstTrafo::~CMyFirstTrafo() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CMyFirstTrafo)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CMyFirstTrafo::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CMyFirstTrafo::SetObjStateSO()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CMyFirstTrafo::SetObjStateOS()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CMyFirstTrafo::SetObjStateSP()
{
	HRESULT hr = S_OK;
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcNcTrafo">
HRESULT CMyFirstTrafo::Forward(TcNcTrafoParameter* p)
{
	HRESULT hr = TrafoSupported(p, true);

	if (SUCCEEDED(hr))
	{
		if (p->i && p->o)
		{
			p->o[0] = p->i[0];
			p->o[1] = p->i[1];
			p->o[2] = p->i[2] + m_ZHeight;
		}

		if (p->d_i && p->d_o)
		{
			p->d_o[0] = p->d_i[0];
			p->d_o[1] = p->d_i[1];
			p->d_o[2] = p->d_i[2];
		}

		if (p->dd_i && p->dd_o)
		{
			p->dd_o[0] = p->dd_i[0];
			p->dd_o[1] = p->dd_i[1];
			p->dd_o[2] = p->dd_i[2];
		}
	}


	return hr;
}

HRESULT CMyFirstTrafo::Backward(TcNcTrafoParameter* p)
{
	HRESULT hr = TrafoSupported(p, false);

	if (SUCCEEDED(hr))
	{
		if (p->i && p->o)
		{
			p->o[0] = p->i[0];
			p->o[1] = p->i[1];
			p->o[2] = p->i[2] - m_ZHeight;
		}

		if (p->d_i && p->d_o)
		{
			p->d_o[0] = p->d_i[0];
			p->d_o[1] = p->d_i[1];
			p->d_o[2] = p->d_i[2];
		}

		if (p->dd_i && p->dd_o)
		{
			p->dd_o[0] = p->dd_i[0];
			p->dd_o[1] = p->dd_i[1];
			p->dd_o[2] = p->dd_i[2];
		}
	}

	return hr;
}

HRESULT CMyFirstTrafo::TrafoSupported(TcNcTrafoParameter* p, bool fwd)
{
	HRESULT hr = S_OK;

	if (p)
	{
		if (fwd)
		{
			if (p->dim_i != 3 || p->dim_o != 3)
			{
				hr = MAKE_ADS_HRESULT(NCERR_KINTRAFO_INVALIDDIM); // kinematics transformation error: invalid dimension
			}
		}
		else
		{
			if (p->dim_i != 3 || p->dim_o != 3)
			{
				hr = MAKE_ADS_HRESULT(NCERR_KINTRAFO_INVALIDDIM);

			}
		}
	}
	else
	{
		hr = E_POINTER;
	}


	return hr;
}

HRESULT CMyFirstTrafo::GetDimensions(ULONG* pFwdInput, ULONG* pFwdOutput)
{
	HRESULT hr = S_OK;

	if (pFwdInput && pFwdOutput)
	{
		*pFwdInput = 3;
		*pFwdOutput = 3;
	}
	else
	{
		hr = E_POINTER; //pointer error
	}

	return hr;
}
///</AutoGeneratedContent>
